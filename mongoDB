**mongod --version 
**Database is a physical container for collections
**In sql,data is stored in tables in format of files
**In mongoDB,the data is stored in form of key value pair and stored in documents
**We can get data from server through json
**A mongodb server has typically multiple databases
***MONGODB terms-
   fields
   document
   collection---group of documents
**ODM--->object document mapper --->MONGODB
**ORM--->in sql


**Features of MONGODB:-
  1.scheme-less
  2.document-oriented
  3.Indexing--->unique indentification given to documents and to fetch the data
  4.Scalability-->horizantal scalability with help of sharding(that distributes data in multiple servers)
  5.Replication--->when server is down and unable retrieve the data then we can get the data from another server
                copy the data from one server to another
  6.Aggregation-->allows to perform operations on grouped data and get single result
  7.High performance

**Disadvantages of mongodb
 1.It uses high memory
 2.not allowed to store more than 16mb data
 3.The nesting of data in BSON(both storage and network)is limited you are not allowed to nest data more than 100 levels
   BSON-->Binary java script object oriented notation

**API--->Application program interface
  pre defined code developed by some programmers

**show dbs
**use collectionname -->switches to that database (use BookStore)
**use local -->switches to local
**use command creates database without being present
**show collections
**cls--->for clearing the screen
**help-->help command
**INSERT MANY
   db.Books.insertMany([{title:"varshi",Author:"varshi",Rating:7},{title:"Rev",Author:"rev",Rating:8}])
**INSERT ONE
   db.Books.insertOne({title:"ganga",Author:"you",rating:"9"})
**db.Books.find() //return all data present in collection
**FIND
  db.Books.find({title:"ganga"})
  db.Books.find({title:"ganga",Author:"you"})
  db.Books.find({title:"ganga"},{title:1,Author:1}) //this gives only title and author fields remaining it willnot show
  db.Books.find({},{title:1,Author:1}) //prints all with title and author field
  db.Books.find()
  db.Books.find({ _id: ObjectId("63fa34b02a82d9cb304755e4")}) //finding by id
  db.Books.find().count()
  db.Books.find({Author:"you"}).count()  //count of that particular author
  db.Books.find().limit(2) //that prints first 2 documents
  db.Books.find().sort({title:1}) //sorts in ascending order 
  db.Books.find().sort({title:-1}) //sorting in descending order
**UPDATE
   db.books.updateOne({Rating:7},{$set: {Rating:9}}) //updates rating 9 to rating 10
   db.Books.updateMany({},{$set: {Rating:10}}) //updates all rating to 10
   **GREATER THAN AND LESS THAN (AND OPERATOR)
   db.Books.find({Rating:{$gt:8}}) //prints rating  greater than to 8
   db.Books.find({Rating:{$gte:8}}) //prints rating  greater than and eqaul to to 8
   db.Books.find({Rating:{$lt:8}}) //[prints rating less than 8
   db.Books.find({Rating:{$lte:8}})//prints rating less than equal to 8
**OR OPERTAOR
  db.Books.find({$or:[{Rating:4},{Rating:8},{Rating:10}]}) //fetches the data that contains rating 4 8 10
  db.Books.find({$or:[{Rating:4},{Title:"ganga"}]}) //or returns if any one condition is true
  db.Books.find({Rating:{$in:[7,8,10]}}) //fetches the documents who ratings are 7 8 10
  db.Books.find({Rating:{$nin:[7,10]}})//fetch the documents who rating is not 7 and 10
**ARRAY ELEMENTS OPERATIONS
 db.Students.find({Marks:"10"})

**DELETE
  db.Books.deleteOne({ _id: ObjectId("63fa34b02a82d9cb304755e4")})
   db.Books.deleteMany({Rating:7})

   


